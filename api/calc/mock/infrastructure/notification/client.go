// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infrastructure/notification/client.go

// Package mock_notification is a generated GoMock package.
package mock_notification

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotificationClient is a mock of NotificationClient interface
type MockNotificationClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationClientMockRecorder
}

// MockNotificationClientMockRecorder is the mock recorder for MockNotificationClient
type MockNotificationClientMockRecorder struct {
	mock *MockNotificationClient
}

// NewMockNotificationClient creates a new mock instance
func NewMockNotificationClient(ctrl *gomock.Controller) *MockNotificationClient {
	mock := &MockNotificationClient{ctrl: ctrl}
	mock.recorder = &MockNotificationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotificationClient) EXPECT() *MockNotificationClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockNotificationClient) Send(ctx context.Context, deviceTokens []string, title, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, deviceTokens, title, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockNotificationClientMockRecorder) Send(ctx, deviceTokens, title, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationClient)(nil).Send), ctx, deviceTokens, title, body)
}
