// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/payment/uploader.go

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentUploader is a mock of PaymentUploader interface
type MockPaymentUploader struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentUploaderMockRecorder
}

// MockPaymentUploaderMockRecorder is the mock recorder for MockPaymentUploader
type MockPaymentUploaderMockRecorder struct {
	mock *MockPaymentUploader
}

// NewMockPaymentUploader creates a new mock instance
func NewMockPaymentUploader(ctrl *gomock.Controller) *MockPaymentUploader {
	mock := &MockPaymentUploader{ctrl: ctrl}
	mock.recorder = &MockPaymentUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentUploader) EXPECT() *MockPaymentUploaderMockRecorder {
	return m.recorder
}

// UploadImage mocks base method
func (m *MockPaymentUploader) UploadImage(ctx context.Context, data []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage
func (mr *MockPaymentUploaderMockRecorder) UploadImage(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockPaymentUploader)(nil).UploadImage), ctx, data)
}
