// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/payment/service.go

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	context "context"
	payment "github.com/calmato/presto-pay/api/calc/internal/domain/payment"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentService is a mock of PaymentService interface
type MockPaymentService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentServiceMockRecorder
}

// MockPaymentServiceMockRecorder is the mock recorder for MockPaymentService
type MockPaymentServiceMockRecorder struct {
	mock *MockPaymentService
}

// NewMockPaymentService creates a new mock instance
func NewMockPaymentService(ctrl *gomock.Controller) *MockPaymentService {
	mock := &MockPaymentService{ctrl: ctrl}
	mock.recorder = &MockPaymentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentService) EXPECT() *MockPaymentServiceMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockPaymentService) Index(ctx context.Context, groupID, startAt string) ([]*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, groupID, startAt)
	ret0, _ := ret[0].([]*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockPaymentServiceMockRecorder) Index(ctx, groupID, startAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockPaymentService)(nil).Index), ctx, groupID, startAt)
}

// Create mocks base method
func (m *MockPaymentService) Create(ctx context.Context, p *payment.Payment, groupID string) (*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p, groupID)
	ret0, _ := ret[0].(*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPaymentServiceMockRecorder) Create(ctx, p, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentService)(nil).Create), ctx, p, groupID)
}

// UploadImage mocks base method
func (m *MockPaymentService) UploadImage(ctx context.Context, data []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage
func (mr *MockPaymentServiceMockRecorder) UploadImage(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockPaymentService)(nil).UploadImage), ctx, data)
}
