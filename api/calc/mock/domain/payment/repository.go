// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/payment/repository.go

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	context "context"
	payment "github.com/calmato/presto-pay/api/calc/internal/domain/payment"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPaymentRepository is a mock of PaymentRepository interface
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// Index mocks base method
func (m *MockPaymentRepository) Index(ctx context.Context, groupID string) ([]*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Index", ctx, groupID)
	ret0, _ := ret[0].([]*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index
func (mr *MockPaymentRepositoryMockRecorder) Index(ctx, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockPaymentRepository)(nil).Index), ctx, groupID)
}

// IndexFromStartAt mocks base method
func (m *MockPaymentRepository) IndexFromStartAt(ctx context.Context, groupID, startAt string) ([]*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexFromStartAt", ctx, groupID, startAt)
	ret0, _ := ret[0].([]*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexFromStartAt indicates an expected call of IndexFromStartAt
func (mr *MockPaymentRepositoryMockRecorder) IndexFromStartAt(ctx, groupID, startAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexFromStartAt", reflect.TypeOf((*MockPaymentRepository)(nil).IndexFromStartAt), ctx, groupID, startAt)
}

// IndexByIsCompleted mocks base method
func (m *MockPaymentRepository) IndexByIsCompleted(ctx context.Context, groupID string, isCompleted bool) ([]*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IndexByIsCompleted", ctx, groupID, isCompleted)
	ret0, _ := ret[0].([]*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IndexByIsCompleted indicates an expected call of IndexByIsCompleted
func (mr *MockPaymentRepositoryMockRecorder) IndexByIsCompleted(ctx, groupID, isCompleted interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IndexByIsCompleted", reflect.TypeOf((*MockPaymentRepository)(nil).IndexByIsCompleted), ctx, groupID, isCompleted)
}

// Show mocks base method
func (m *MockPaymentRepository) Show(ctx context.Context, groupID, paymentID string) (*payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", ctx, groupID, paymentID)
	ret0, _ := ret[0].(*payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show
func (mr *MockPaymentRepositoryMockRecorder) Show(ctx, groupID, paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockPaymentRepository)(nil).Show), ctx, groupID, paymentID)
}

// Create mocks base method
func (m *MockPaymentRepository) Create(ctx context.Context, p *payment.Payment, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, p, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockPaymentRepositoryMockRecorder) Create(ctx, p, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPaymentRepository)(nil).Create), ctx, p, groupID)
}

// Update mocks base method
func (m *MockPaymentRepository) Update(ctx context.Context, p *payment.Payment, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, p, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPaymentRepositoryMockRecorder) Update(ctx, p, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPaymentRepository)(nil).Update), ctx, p, groupID)
}
