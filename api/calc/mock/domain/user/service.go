// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/user/service.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	user "github.com/calmato/presto-pay/api/calc/internal/domain/user"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// Authentication mocks base method
func (m *MockUserService) Authentication(ctx context.Context) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authentication", ctx)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authentication indicates an expected call of Authentication
func (mr *MockUserServiceMockRecorder) Authentication(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authentication", reflect.TypeOf((*MockUserService)(nil).Authentication), ctx)
}

// CreateUnauthorizedUser mocks base method
func (m *MockUserService) CreateUnauthorizedUser(ctx context.Context, name, thumbnail string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnauthorizedUser", ctx, name, thumbnail)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnauthorizedUser indicates an expected call of CreateUnauthorizedUser
func (mr *MockUserServiceMockRecorder) CreateUnauthorizedUser(ctx, name, thumbnail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnauthorizedUser", reflect.TypeOf((*MockUserService)(nil).CreateUnauthorizedUser), ctx, name, thumbnail)
}

// ContainsGroupID mocks base method
func (m *MockUserService) ContainsGroupID(ctx context.Context, u *user.User, groupID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsGroupID", ctx, u, groupID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainsGroupID indicates an expected call of ContainsGroupID
func (mr *MockUserServiceMockRecorder) ContainsGroupID(ctx, u, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsGroupID", reflect.TypeOf((*MockUserService)(nil).ContainsGroupID), ctx, u, groupID)
}
